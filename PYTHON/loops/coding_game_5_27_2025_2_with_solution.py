'''
A gold mining operation works on a mxn area containing a certain amount of gold. To make exploitation simple, the area is divided into a grid of squares of size kxk. Each day, the operation mines one of those kxk square completely, until the whole area has been mined.

What is the maximum amount of gold that the operation will mine in one day?

Note: The grid squares are fixed. In a 4x4 area if the area is divided into square grids of size 2x2, then there are 4 such squares. This is illustrated below, with letters A, B, C, D, corresponding to grid square 1, 2, 3 and 4 accordingly:

A A B B
A A B B
C C D D
C C D D
Input
Line 1: Three space-separated integers m, n, k.
Next m lines: n space-separated integers indicating the amount of gold in a 1x1 square
Output
An integer indicating the maximum amount of gold that the operation will mine in one day.
Constraints
0 < m, n, k < 100
m%k == n%k == 0

Initial code(start):

m, n, k = [int(i) for i in input().split()]

for i in range(m):
    row = input()

Initla code(end).


Example
Input
4 4 2
0 1 0 0
0 0 0 1
1 1 1 0
1 0 0 0
Output
3
__________________
6 9 3
1 0 2 3 2 4 3 1 5
1 5 2 1 0 0 2 5 1
0 5 1 4 4 4 2 5 2
5 3 4 3 0 3 4 1 2
3 4 4 4 1 4 3 3 1
2 5 3 2 5 3 0 5 1
33
__________________
25 10 5
1 1 4 8 10 0 5 10 10 4
4 9 0 1 9 7 7 10 6 4
7 1 8 4 2 7 5 3 5 2
3 1 2 6 9 10 3 10 8 9
5 4 2 2 4 3 5 1 7 8
1 2 3 9 8 2 6 3 4 2
9 10 4 8 4 8 10 1 1 10
6 6 7 8 4 3 10 4 0 3
7 9 9 7 8 2 4 5 5 2
8 6 8 3 8 1 7 3 8 0
1 5 7 10 5 8 10 9 3 10
1 5 4 10 0 3 3 6 1 3
7 9 8 7 7 5 2 6 7 8
8 0 8 2 7 6 4 8 3 4
4 9 3 2 10 5 6 1 3 4
6 0 7 6 10 0 10 0 8 8
6 8 5 7 5 1 9 8 9 3
0 8 10 4 10 6 3 5 7 7
6 9 5 5 2 6 4 6 10 6
9 5 10 0 10 9 2 3 10 5
5 9 4 10 3 2 3 2 6 6
3 1 5 10 10 6 3 3 6 8
10 3 6 2 4 8 7 6 9 5
5 7 3 10 10 2 2 0 2 1
0 5 4 8 9 3 2 8 8 10
162
__________________
10 10 2
45 3 9 40 71 95 7 13 14 39
91 2 40 69 90 96 53 56 39 49
39 79 27 30 13 35 84 46 48 68
36 46 62 32 43 69 96 44 25 90
45 20 64 5 41 74 56 63 10 62
10 12 0 54 77 43 65 42 52 7
55 96 34 26 28 87 42 7 25 30
17 19 15 66 93 29 37 11 75 34
57 10 85 41 84 62 6 3 73 64
83 46 47 88 10 52 49 29 63 63
352
__________________
16 24 4
9358 3630 6977 4105 7470 9647 4835 7461 7629 5495 419 7487 7553 8995 156 5881 6803 3994 7886 574 7021 8004 2899 5315
9722 2515 5415 7136 5084 9271 476 7473 9885 463 6540 6096 8016 8784 4570 1059 6366 7793 3514 2919 6303 3867 3575 2448
3550 813 677 852 9041 4364 8808 7256 912 2511 4778 2626 973 7604 8449 7851 9796 9867 1463 3686 2081 1814 6883 6303
4249 2803 9652 5540 5400 3075 7823 5716 4273 7261 9624 1423 5854 1147 7333 8218 7180 6069 4070 2903 2974 7536 2034 2154
4690 578 3637 8680 2227 3410 7326 2331 3149 8643 5584 4476 7799 3753 2558 5555 979 9386 5354 5173 9593 2857 5634 4225
9764 6872 6768 3671 5071 2574 6657 9151 9276 6175 9020 1556 2698 2981 3987 8748 397 24 3714 7874 7097 9502 9098 9928
5353 359 4218 1946 1511 3781 603 6905 1026 9997 5530 9127 3628 6711 4365 8262 1446 9865 3908 2582 6223 2483 6672 9246
2390 3356 321 2081 5977 1411 9035 9163 8657 4321 5506 6527 8440 9364 1314 555 6594 6434 8413 9274 1648 8934 4195 8032
5729 735 1483 6301 8710 3904 1494 2024 4249 11 6891 3759 9694 5924 3787 5021 14 2645 9991 5682 4394 279 8257 5588
8456 6050 7880 6671 929 4084 5160 6536 7317 8228 2492 2882 2255 1971 2702 1747 3770 9447 9407 6107 2910 8761 4881 9617
2549 6389 3379 2015 143 2110 7137 1174 4297 5506 7379 1445 5709 5588 1712 9975 5104 7549 4986 1668 7312 8745 7136 5070
9293 6442 2449 4196 5432 8953 6349 8679 840 6326 6760 6774 5327 6226 1957 2212 1869 2570 3920 5347 9974 7430 6307 6032
2194 6486 4036 5952 8863 7219 9818 2989 7176 5784 8931 7231 5286 7912 7265 9502 7247 6833 8571 508 9916 2645 5138 6882
4669 1506 1001 4486 2393 3098 1480 8769 2241 4959 9129 221 2019 3906 4631 1110 9647 3218 2263 6343 1075 9257 8553 445
8922 356 3519 9137 2798 8455 1725 5981 6046 4748 6664 2103 1905 1861 8616 5179 9747 4273 6060 8299 7674 7668 3934 3472
906 9119 9839 5842 2426 987 985 4423 1320 9292 5987 3183 5958 4960 7122 5330 311 9473 4078 2442 9166 7135 8291 1572
105367
'''

#My solution

import sys
import math

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

m, n, k = [int(i) for i in input().split()]
the_field = []
for i in range(m):
    row = input()
    the_field.append([int(x) for x in row.split()])
the_max = 0
for i in range(0, m, k):
    for y in range(0, n, k):
        the_each = 0
        for t in range(i, i+k):
            the_each += sum([x for x in the_field[t][y:y+k]])
        if the_each > the_max:
            the_max = the_each
print(the_max)
